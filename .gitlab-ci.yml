stages:
  - setup
  - build
  - test
  - deploy


variables:
  CONAN_NAME: "labrat-robot"
  CONAN_USER: "labrat.eu+robot"
  CONAN_CHANNEL: "alpha"


.init-docker: &init-docker |
  docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY


.init-generic: &init-generic |
  git config --global --add safe.directory '*'
  export CONAN_USER_HOME=$(pwd)/.tmp/
  pip install --upgrade conan_package_tools
  pip install regex
  conan profile new ci --detect --force
  conan profile update settings.compiler.cppstd=20 ci
  conan profile update settings.compiler.libcxx=libstdc++11 ci
  echo -e "\n[build_requires]\n&: cmake/3.25.1" >> .tmp/.conan/profiles/ci
  conan remote add --force gitlab https://gitlab.com/api/v4/packages/conan
  conan user -c
  conan user ci_user -r gitlab -p ${CI_JOB_TOKEN}


.init-clang: &init-clang
  cache:
    key: clang
    paths:
      - .tmp/
  before_script:
    - *init-generic
    - conan profile update settings.compiler=clang ci
    - conan profile update settings.compiler.version=14 ci
    - conan profile update env.CC=clang-14 ci
    - conan profile update env.CXX=clang++-14 ci

.init-gcc: &init-gcc
  cache:
    key: gcc
    paths:
      - .tmp/
  before_script:
    - *init-generic
    - conan profile update settings.compiler=gcc ci
    - conan profile update settings.compiler.version=12 ci
    - conan profile update env.CC=gcc-12 ci
    - conan profile update env.CXX=g++-12 ci


.build-generic: &build-generic |
  if [ $LABRAT_ROBOT_NIGHTLY_PIPELINE ]; then rm -rf $CONAN_USER_HOME/.conan/data; fi
  conan remove --force $CONAN_NAME/*
  conan create . $CONAN_USER/$CONAN_CHANNEL -b=outdated -pr:h=ci -pr:b=ci

.test-generic: &test-generic |
  CTEST_OUTPUT_ON_FAILURE=1 conan test -b=outdated -pr:h=ci -pr:b=ci testing $(conan info . | grep -oE "$CONAN_NAME/v(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(\+[a-z0-9\-]+)?" | head -n1)@$CONAN_USER/$CONAN_CHANNEL

.deploy-generic: &deploy-generic |
  conan upload $(conan info . | grep -oE "$CONAN_NAME/v(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(\+[a-z0-9\-]+)?" | head -n1)@$CONAN_USER/$CONAN_CHANNEL --all -r gitlab


setup:clang-14:
  stage: setup
  rules:
    - changes:
      - .ci/clang-14/*
    - if: $LABRAT_ROBOT_NIGHTLY_PIPELINE
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - *init-docker
  script:
    - cd .ci/clang-14
    - docker build -t $CI_REGISTRY_IMAGE:clang-14 .
    - docker push $CI_REGISTRY_IMAGE:clang-14

setup:gcc-12:
  stage: setup
  rules:
    - changes:
      - .ci/gcc-12/*
    - if: $LABRAT_ROBOT_NIGHTLY_PIPELINE
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - *init-docker
  script:
    - cd .ci/gcc-12
    - docker build -t $CI_REGISTRY_IMAGE:gcc-12 .
    - docker push $CI_REGISTRY_IMAGE:gcc-12

setup:doxygen:
  stage: setup
  rules:
    - changes:
      - .ci/doxygen/*
    - if: $LABRAT_ROBOT_NIGHTLY_PIPELINE
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - *init-docker
  script:
    - cd .ci/doxygen
    - docker build -t $CI_REGISTRY_IMAGE:doxygen .
    - docker push $CI_REGISTRY_IMAGE:doxygen


build:clang-14:
  stage: build
  image: $CI_REGISTRY_IMAGE:clang-14
  <<: *init-clang
  script:
    - *build-generic

test:clang-14:
  stage: test
  needs: ["build:clang-14"]
  image: $CI_REGISTRY_IMAGE:clang-14
  <<: *init-clang
  script:
    - *test-generic

deploy:clang-14:
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_PROTECTED
    - if: $CI_COMMIT_TAG
  image: $CI_REGISTRY_IMAGE:clang-14
  <<: *init-clang
  script:
    - *deploy-generic


build:gcc-12:
  stage: build
  image: $CI_REGISTRY_IMAGE:gcc-12
  <<: *init-gcc
  script:
    - *build-generic

test:gcc-12:
  stage: test
  needs: ["build:gcc-12"]
  image: $CI_REGISTRY_IMAGE:gcc-12
  <<: *init-gcc
  script:
    - *test-generic

deploy:gcc-12:
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_PROTECTED
    - if: $CI_COMMIT_TAG
  image: $CI_REGISTRY_IMAGE:gcc-12
  <<: *init-gcc
  script:
    - *deploy-generic

pages:
  stage: deploy
  image: $CI_REGISTRY_IMAGE:doxygen
  <<: *init-gcc
  script:
    - mkdir build
    - cd build
    - conan install .. -b=missing -pr:h=ci -pr:b=ci -o="&:manual_build=True"
    - conan build ..
    - cmake .. -DROBOT_ENABLE_DOCS=ON
    - make generate-docs
    - cd ..
    - cp -r docs/html public
  artifacts:
    paths:
      - public
