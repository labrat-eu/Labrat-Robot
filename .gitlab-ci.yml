stages:
  - setup
  - build
  - test
  - deploy


.init-docker: &init-docker |
  docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY


.init-generic: &init-generic |
  git config --global --add safe.directory '*'
  export CONAN_USER_HOME=$(pwd)/.tmp/
  pip install --upgrade conan_package_tools
  pip install regex
  conan profile new ci --detect --force
  conan profile update settings.compiler.cppstd=20 ci
  conan profile update settings.compiler.libcxx=libstdc++11 ci
  echo -e "\n[build_requires]\n&: cmake/3.25.1" >> .tmp/.conan/profiles/ci
  conan remote add --force gitlab https://gitlab.com/api/v4/packages/conan
  conan user -c
  conan user ci_user -r gitlab -p ${CI_JOB_TOKEN}


.init-clang: &init-clang
  cache:
    key: clang
    paths:
      - .tmp/
  variables:
    CONAN_NAME: "labrat-robot"
    CONAN_USER: "labrat.eu+robot"
    CONAN_CHANNEL: "clang"
  before_script:
    - *init-generic

.init-gcc: &init-gcc
  cache:
    key: gcc
    paths:
      - .tmp/
  variables:
    CONAN_NAME: "labrat-robot"
    CONAN_USER: "labrat.eu+robot"
    CONAN_CHANNEL: "gcc"
  before_script:
    - *init-generic


.build-generic: &build-generic |
  conan remove --force $CONAN_NAME/*
  conan create . $CONAN_USER/$CONAN_CHANNEL --build=missing -pr:h=ci

.test-generic: &test-generic |
  conan test --build=missing -pr:h=ci testing $(conan info . | grep -oE "$CONAN_NAME/v(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(\+[a-Z0-9\-]+)?" | head -n1)@$CONAN_USER/$CONAN_CHANNEL

.deploy-generic: &deploy-generic |
  conan upload $(conan info . | grep -oE "$CONAN_NAME/v(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(\+[a-Z0-9\-]+)?" | head -n1)@$CONAN_USER/$CONAN_CHANNEL --all -r gitlab


setup:clang-14:
  stage: setup
  only:
    changes:
      - .ci/clang-14/*
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - *init-docker
  script:
    - cd .ci/clang-14
    - docker build -t $CI_REGISTRY_IMAGE:clang-14 .
    - docker push $CI_REGISTRY_IMAGE:clang-14

setup:gcc-12:
  stage: setup
  only:
    changes:
      - .ci/gcc-12/*
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - *init-docker
  script:
    - cd .ci/gcc-12
    - docker build -t $CI_REGISTRY_IMAGE:gcc-12 .
    - docker push $CI_REGISTRY_IMAGE:gcc-12


build:clang-14:
  stage: build
  image: $CI_REGISTRY_IMAGE:clang-14
  <<: *init-clang
  script:
    - *build-generic

test:clang-14:
  stage: test
  needs: ["build:clang-14"]
  image: $CI_REGISTRY_IMAGE:clang-14
  <<: *init-clang
  script:
    - *test-generic

deploy:clang-14:
  stage: deploy
  needs: ["test:clang-14"]
  only:
    refs:
      - main
      - tags
  image: $CI_REGISTRY_IMAGE:clang-14
  <<: *init-clang
  script:
    - *deploy-generic


.build:gcc-12:
  stage: build
  image: $CI_REGISTRY_IMAGE:gcc-12
  <<: *init-gcc
  script:
    - *build-generic

.test:gcc-12:
  stage: test
  needs: ["build:gcc-12"]
  image: $CI_REGISTRY_IMAGE:gcc-12
  <<: *init-gcc
  script:
    - *test-generic

.deploy:gcc-12:
  stage: deploy
  needs: ["test:gcc-12"]
  only:
    refs:
      - main
      - tags
  image: $CI_REGISTRY_IMAGE:gcc-12
  <<: *init-gcc
  script:
    - *deploy-generic
