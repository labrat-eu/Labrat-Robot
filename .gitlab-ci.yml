stages:
  - setup
  - build
  - quality
  - test
  - deploy


variables:
  CONAN_NAME: "lbot"


.init-docker: &init-docker |
  echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin


.init-generic: &init-generic |
  git config --global --add safe.directory '*'
  export CONAN_HOME=$(pwd)/.tmp/
  mkdir -p .tmp/profiles/
  cp /opt/conan_profile .tmp/profiles/ci
# conan remote add --force gitlab https://gitlab.com/api/v4/packages/conan
# conan remote login gitlab ci_user -p ${CI_JOB_TOKEN}


.init-clang: &init-clang
  cache:
    key: clang
    paths:
      - .tmp/
  before_script:
    - *init-generic

.init-gcc: &init-gcc
  cache:
    key: gcc
    paths:
      - .tmp/
  before_script:
    - *init-generic


.build-generic: &build-generic |
  if [ $LBOT_NIGHTLY_PIPELINE ]; then rm -rf $CONAN_USER_HOME/.conan/data; fi
  conan remove -c $CONAN_NAME/*
  conan source .
  conan build . -b=missing -pr:h=ci -pr:b=ci
  conan export-pkg . --name $CONAN_NAME -pr:h=ci -pr:b=ci

.test-generic: &test-generic |
  conan export-pkg . --name $CONAN_NAME -pr:h=ci -pr:b=ci
  CTEST_OUTPUT_ON_FAILURE=1 conan test -b=missing -pr:h=ci -pr:b=ci testing $CONAN_NAME/$(conan inspect . | grep -Po "(?<=version: ).*" | head -n1)

.examples-generic: &examples-generic |
  cd examples
  conan build . -b=missing -pr:h=ci -pr:b=ci

.deploy-generic: &deploy-generic |
  conan upload $CONAN_NAME/$(conan inspect . | grep -Po "(?<=version: ).*" | head -n1) --all -r gitlab --retry 5 --retry-wait 10


setup:clang-18:
  stage: setup
  rules:
    - changes:
      - .ci/clang-18/*
    - if: $LBOT_NIGHTLY_PIPELINE
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - *init-docker
  script:
    - cd .ci/clang-18
    - docker build -t $CI_REGISTRY_IMAGE:clang-18 .
    - docker push $CI_REGISTRY_IMAGE:clang-18

setup:gcc-13:
  stage: setup
  rules:
    - changes:
      - .ci/gcc-13/*
    - if: $LBOT_NIGHTLY_PIPELINE
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - *init-docker
  script:
    - cd .ci/gcc-13
    - docker build -t $CI_REGISTRY_IMAGE:gcc-13 .
    - docker push $CI_REGISTRY_IMAGE:gcc-13

setup:doxygen:
  stage: setup
  rules:
    - changes:
      - .ci/doxygen/*
    - if: $LBOT_NIGHTLY_PIPELINE
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - *init-docker
  script:
    - cd .ci/doxygen
    - docker build -t $CI_REGISTRY_IMAGE:doxygen .
    - docker push $CI_REGISTRY_IMAGE:doxygen


build:clang-18:
  stage: build
  image: $CI_REGISTRY_IMAGE:clang-18
  artifacts:
    paths:
      - build/*
  <<: *init-clang
  script:
    - *build-generic

format:clang-18:
  stage: quality
  needs: ["build:clang-18"]
  image: $CI_REGISTRY_IMAGE:clang-18
  dependencies: ["build:clang-18"]
  <<: *init-clang
  script:
    - shopt -s globstar
    - clang-format-18 -n -Werror --style=file:build/RelWithDebInfo/.clang-format src/*.cpp src/*.hpp src/**/*.cpp src/**/*.hpp

test:clang-18:
  stage: test
  needs: ["build:clang-18"]
  image: $CI_REGISTRY_IMAGE:clang-18
  dependencies: ["build:clang-18"]
  artifacts:
    when: always
    paths:
      - test_report.xml
    reports:
      junit: test_report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
  <<: *init-clang
  script:
    - *test-generic
  after_script:
    - cp `find -L testing/build/ -name report.xml` test_report.xml
    - gcovr testing build -f=src/* -e=src/plugins* --txt --cobertura coverage.xml --gcov-executable "llvm-cov-18 gcov"
    - sed -i 's/filename="build\/RelWithDebInfo\/include\/labrat\/lbot/filename="src/g' coverage.xml

examples:clang-18:
  stage: test
  needs: ["build:clang-18"]
  image: $CI_REGISTRY_IMAGE:clang-18
  <<: *init-clang
  script:
    - *examples-generic

# Hidden until GitLab supports conan 2.0
.deploy:clang-18:
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_PROTECTED
    - if: $CI_COMMIT_TAG
  image: $CI_REGISTRY_IMAGE:clang-18
  <<: *init-clang
  script:
    - *deploy-generic


build:gcc-13:
  stage: build
  image: $CI_REGISTRY_IMAGE:gcc-13
  artifacts:
    paths:
      - build/*
  <<: *init-gcc
  script:
    - *build-generic

test:gcc-13:
  stage: test
  needs: ["build:gcc-13"]
  image: $CI_REGISTRY_IMAGE:gcc-13
  dependencies: ["build:gcc-13"]
  artifacts:
    when: always
    paths:
      - test_report.xml
    reports:
      junit: test_report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
  <<: *init-gcc
  script:
    - *test-generic
  after_script:
    - cp `find -L testing/build/ -name report.xml` test_report.xml
    - gcovr testing build -f=src/* -e=src/plugins* --txt --cobertura coverage.xml --gcov-executable "gcov-13"
    - sed -i 's/filename="build\/RelWithDebInfo\/include\/labrat\/lbot/filename="src/g' coverage.xml

examples:gcc-13:
  stage: test
  needs: ["build:gcc-13"]
  image: $CI_REGISTRY_IMAGE:gcc-13
  <<: *init-gcc
  script:
    - *examples-generic

# Hidden until GitLab supports conan 2.0
.deploy:gcc-13:
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_PROTECTED
    - if: $CI_COMMIT_TAG
  image: $CI_REGISTRY_IMAGE:gcc-13
  <<: *init-gcc
  script:
    - *deploy-generic

pages:
  stage: deploy
  image: $CI_REGISTRY_IMAGE:doxygen
  dependencies: ["build:gcc-13"]
  <<: *init-gcc
  script:
    - doxygen build/RelWithDebInfo/doxyfile 
    - cp -r build/RelWithDebInfo/docs/html public
  artifacts:
    paths:
      - public
