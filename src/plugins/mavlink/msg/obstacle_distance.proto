syntax = "proto3";

package mavlink.msg.common;

message ObstacleDistance {
  uint64 time_usec = 1; /*< [us] Timestamp (UNIX Epoch time or time since system boot) The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.*/
  repeated uint32 distances = 2; /*< [cm] Distance of obstacles around the vehicle with index 0 corresponding to north + angle_offset, unless otherwise specified in the frame A value of 0 is valid and means that the obstacle is practically touching the sensor. A value of max_distance +1 means no obstacle is present. A value of UINT16_MAX for unknown/not used. In a array element, one unit corresponds to 1cm.*/
  uint32 min_distance = 3; /*< [cm] Minimum distance the sensor can measure*/
  uint32 max_distance = 4; /*< [cm] Maximum distance the sensor can measure*/
  uint32 sensor_type = 5; /*<  Class id of the distance sensor type*/
  uint32 increment = 6; /*< [deg] Angular width in degrees of each array element Increment direction is clockwise. This field is ignored if increment_f is non-zero.*/
  float increment_f = 7; /*< [deg] Angular width in degrees of each array element as a float If non-zero then this value is used instead of the uint8 increment field. Positive is clockwise direction, negative is counter-clockwise.*/
  float angle_offset = 8; /*< [deg] Relative angle offset of the 0-index element in the distances array Value of 0 corresponds to forward. Positive is clockwise direction, negative is counter-clockwise.*/
  uint32 frame = 9; /*<  Coordinate frame of reference for the yaw rotation and offset of the sensor data Defaults to MAV_FRAME_GLOBAL, which is north aligned. For body-mounted sensors use MAV_FRAME_BODY_FRD, which is vehicle front aligned.*/
}

