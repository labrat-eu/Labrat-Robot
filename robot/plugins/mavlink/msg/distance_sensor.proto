syntax = "proto3";

package mavlink.msg.common;

message DistanceSensor {
  uint32 time_boot_ms = 1; /*< [ms] Timestamp (time since system boot)*/
  uint32 min_distance = 2; /*< [cm] Minimum distance the sensor can measure*/
  uint32 max_distance = 3; /*< [cm] Maximum distance the sensor can measure*/
  uint32 current_distance = 4; /*< [cm] Current distance reading*/
  uint32 type = 5; /*<  Type of distance sensor*/
  uint32 id = 6; /*<  Onboard ID of the sensor*/
  uint32 orientation = 7; /*<  Direction the sensor faces downward-facing: ROTATION_PITCH_270, upward-facing: ROTATION_PITCH_90, backward-facing: ROTATION_PITCH_180, forward-facing: ROTATION_NONE, left-facing: ROTATION_YAW_90, right-facing: ROTATION_YAW_270*/
  uint32 covariance = 8; /*< [cm^2] Measurement variance Max standard deviation is 6cm. UINT8_MAX if unknown.*/
  float horizontal_fov = 9; /*< [rad] Horizontal Field of View (angle) where the distance measurement is valid and the field of view is known Otherwise this is set to 0.*/
  float vertical_fov = 10; /*< [rad] Vertical Field of View (angle) where the distance measurement is valid and the field of view is known Otherwise this is set to 0.*/
  repeated float quaternion = 11; /*<  Quaternion of the sensor orientation in vehicle body frame (w, x, y, z order, zero-rotation is 1, 0, 0, 0) Zero-rotation is along the vehicle body x-axis. This field is required if the orientation is set to MAV_SENSOR_ROTATION_CUSTOM. Set it to 0 if invalid."*/
  uint32 signal_quality = 12; /*< [%] Signal quality of the sensor Specific to each sensor type, representing the relation of the signal strength with the target reflectivity, distance, size or aspect, but normalised as a percentage. 0 = unknown/unset signal quality, 1 = invalid signal, 100 = perfect signal.*/
}

