syntax = "proto3";

package mavlink.msg.common;

message GpsRawInt {
  uint64 time_usec = 1; /*< [us] Timestamp (UNIX Epoch time or time since system boot) The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.*/
  sint32 lat = 2; /*< [degE7] Latitude (WGS84, EGM96 ellipsoid)*/
  sint32 lon = 3; /*< [degE7] Longitude (WGS84, EGM96 ellipsoid)*/
  sint32 alt = 4; /*< [mm] Altitude (MSL) Positive for up. Note that virtually all GPS modules provide the MSL altitude in addition to the WGS84 altitude.*/
  uint32 eph = 5; /*<  GPS HDOP horizontal dilution of position (unitless * 100) If unknown, set to: UINT16_MAX*/
  uint32 epv = 6; /*<  GPS VDOP vertical dilution of position (unitless * 100) If unknown, set to: UINT16_MAX*/
  uint32 vel = 7; /*< [cm/s] GPS ground speed If unknown, set to: UINT16_MAX*/
  uint32 cog = 8; /*< [cdeg] Course over ground (NOT heading, but direction of movement) in degrees * 100, 00..359.99 degrees. If unknown, set to: UINT16_MAX*/
  uint32 fix_type = 9; /*<  GPS fix type*/
  uint32 satellites_visible = 10; /*<  Number of satellites visible If unknown, set to UINT8_MAX*/
  sint32 alt_ellipsoid = 11; /*< [mm] Altitude (above WGS84, EGM96 ellipsoid) Positive for up.*/
  uint32 h_acc = 12; /*< [mm] Position uncertainty*/
  uint32 v_acc = 13; /*< [mm] Altitude uncertainty*/
  uint32 vel_acc = 14; /*< [mm] Speed uncertainty*/
  uint32 hdg_acc = 15; /*< [degE5] Heading / track uncertainty*/
  uint32 yaw = 16; /*< [cdeg] Yaw in earth frame from north Use 0 if this GPS does not provide yaw. Use UINT16_MAX if this GPS is configured to provide yaw and is currently unable to provide it. Use 36000 for north.*/
}

