syntax = "proto3";

package mavlink.msg.common;

message OpenDroneIdLocation {
  sint32 latitude = 1; /*< [degE7] Current latitude of the unmanned aircraft If unknown: 0 (both Lat/Lon).*/
  sint32 longitude = 2; /*< [degE7] Current longitude of the unmanned aircraft If unknown: 0 (both Lat/Lon).*/
  float altitude_barometric = 3; /*< [m] The altitude calculated from the barometric pressue Reference is against 29.92inHg or 1013.2mb. If unknown: -1000 m.*/
  float altitude_geodetic = 4; /*< [m] The geodetic altitude as defined by WGS84 If unknown: -1000 m.*/
  float height = 5; /*< [m] The current height of the unmanned aircraft above the take-off location or the ground as indicated by height_reference If unknown: -1000 m.*/
  float timestamp = 6; /*< [s] Seconds after the full hour with reference to UTC time Typically the GPS outputs a time-of-week value in milliseconds. First convert that to UTC and then convert for this field using ((float) (time_week_ms % (60*60*1000))) / 1000. If unknown: 0xFFFF.*/
  uint32 direction = 7; /*< [cdeg] Direction over ground (not heading, but direction of movement) measured clockwise from true North: 0 - 35999 centi-degrees If unknown: 36100 centi-degrees.*/
  uint32 speed_horizontal = 8; /*< [cm/s] Ground speed Positive only. If unknown: 25500 cm/s. If speed is larger than 25425 cm/s, use 25425 cm/s.*/
  sint32 speed_vertical = 9; /*< [cm/s] The vertical speed Up is positive. If unknown: 6300 cm/s. If speed is larger than 6200 cm/s, use 6200 cm/s. If lower than -6200 cm/s, use -6200 cm/s.*/
  uint32 target_system = 10; /*<  System ID (0 for broadcast)*/
  uint32 target_component = 11; /*<  Component ID (0 for broadcast)*/
  bytes id_or_mac = 12; /*<  Only used for drone ID data received from other UAs See detailed description at https://mavlink.io/en/services/opendroneid.html. */
  uint32 status = 13; /*<  Indicates whether the unmanned aircraft is on the ground or in the air*/
  uint32 height_reference = 14; /*<  Indicates the reference point for the height field*/
  uint32 horizontal_accuracy = 15; /*<  The accuracy of the horizontal position*/
  uint32 vertical_accuracy = 16; /*<  The accuracy of the vertical position*/
  uint32 barometer_accuracy = 17; /*<  The accuracy of the barometric altitude*/
  uint32 speed_accuracy = 18; /*<  The accuracy of the horizontal and vertical speed*/
  uint32 timestamp_accuracy = 19; /*<  The accuracy of the timestamps*/
}

